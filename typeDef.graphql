# Interface : Base
interface Base {
  id: ID!
  name: String! 
}
# Interface : Management
interface Management{
  phoneNumber: String!
}

# Custom Scalar Type
scalar Datetime

# Input types
input ProductInput {
  type: ProductType!
  name: String!,
  price: Int!,
  description: String!
  managerid: String!
}

input ManagerInput {
  name: String!,
  age: Int!,
  sex: Sex!
}

# Input types Update Product
input UpdateProductInput{
  id: ID!
  name: String,
  price: Int,
  description: String
  type: ProductType
  managerid: String
}

input UpdateManagerInput{
  id: ID!
  name: String,
  age: Int,
  sex: Sex 
}

# Input types Delete Product
input DeleteProductInput{
  id: ID! 
}

input DeleteManagerInput{
  id: ID!
}


enum ProductType {
  GADGET
  FOOD
  SOFTWARE
  ETC
}

enum Sex{
  Male
  Female
}


# Product type
type Product {
  id: ID!,
  type: ProductType!,
  name: String!,
  price: Int!,
  description: String!
  managerid: String!
  discountedPrice(rate:Int!):Int!
  managerInfo:Manager!
}

type MutationResponse{
  success: Boolean!,
  message: String!
}


type Manager{
  id: ID!,
  name: String!,
  age: Int!,
  sex: Sex!,
  managingProducts:[Product!]!
  checkMyProduct(id:String!):Product!
}


# Query
type Query{
  getProduct(id: ID!): [Product!]!
  getManager(id: ID!): [Manager!]!
  getAllProduct:[Product!]!
  getAllManagers:[Manager!]!
}

# Mutation

# addManager : add Manager's ID

# addProduct : add Product's ID

type Mutation{
  addManager(input: ManagerInput):MutationResponse!
  addProduct(input: ProductInput): MutationResponse!
  updateProduct(update: UpdateProductInput): MutationResponse!
  updateManager(update: UpdateManagerInput) : MutationResponse!
  deleteProduct(del: DeleteProductInput): MutationResponse!
  deleteManager(del: DeleteManagerInput): MutationResponse!
}